any(is.na(cat))
any(sapply(cat, is.infinite))
#save as interim data
write.csv(gene,"data/interim/gene.csv")
write.csv(cat,"data/interim/x_cat.csv")
write.csv(num,"data/interim/x_num.csv")
write.csv(cat_clean,"data/interim/y_class.csv")
write.csv(class,"data/interim/y_class.csv")
any(is.na(cat))
any(sapply(cat, is.infinite))
data <- read.csv("data/interim/x_num.csv", row.names = 1)
class <- read.csv("data/interim/y_class.csv", row.names = 1)
pca <- prcomp(data, scale=TRUE)
summary(pca)$importance[,1]
pca_summary <- NULL
pca_summary <- as.data.frame(seq(1, nrow(data), by=1))
names(pca_summary)[1] <- "index"
pca_summary$var <- summary(pca)$importance[2,]
pca_summary$cum_var <- summary(pca)$importance[3,]
ggplot(data=pca_summary, aes(x=index, y=var)) + geom_line() + geom_point()
ggplot(data=pca_summary, aes(x=index, y=cum_var)) + geom_line()+ geom_point()
class_pc <- cbind(class, pca$x)
ggpairs(data=class_pc, columns = 4:10, ggplot2::aes(colour=cancer), progress = F)
ggpairs(data=class_pc, columns = 5:10, ggplot2::aes(colour=cancer), progress = F)
screeplot(pca, main="Scree Plot", xlab="Components")
screeplot(pca, main="Scree Plot", type="lines", xlab="Components")
screeplot(pca, main="Scree Plot", type="line", xlab="Components")
screeplot(pca, main="Scree Plot", type="line")
pca$sdev ^ 2 > 1
pca$rotation[1]
pca$rotation
pca$rotation[1,]
pca$rotation[,1]
length(pca$rotation[,1])
order(pca$rotation[,1])
test$pc1 <- pca$rotation[,1]
test <- as.data.frame()
test$pc1 <- pca$rotation[,1]
length(pca$rotation[,1])
test <- as.data.frame()
length(pca$rotation[,1])
test <- as.data.frame(NULL)
test$pc1 <- pca$rotation[,1]
length(pca$rotation[,1])
test <- as.data.frame(pca$rotation[,1])
test$pc1 <- pca$rotation[,1]
test
num_genes <- length(pca$rotation[,1])
test <- as.data.frame(seq(1,num_genes))
test$pc1 <- pca$rotation[,1]
test
order(test$pc1)
test[order(pc1),]
test[order(test$pc1),]
test[order(-test$pc1),]
test[order(test$pc1),]
-
test[order(-test$pc1),]
test <- as.data.frame(pca$rotation)
test
pca$sdev ^ 2 > 1
summary(pca)$importance[,1]
pca <- prcomp(scale(data), scale=TRUE, center=TRUE)
pca <- prcomp(scale(data), scale=TRUE, center=TRUE)
summary(pca)$importance[,1]
pca <- prcomp(data, scale=TRUE, center=TRUE)
summary(pca)$importance[,1]
pca$sdev ^ 2 > 1
pca_rotation <- as.data.frame(pca$rotation)
dim(pca_rotation)
str(class)
class$cancer <- as.factor(class$cancer)
str(class)
class$cancer <- as.factor(class$cancer)
str(class)
class_pc <- cbind(class, pca$x)
class_pc
logistic <- glm(data=class_pc, class ~ . - patient - test_train - cancer, family = "binomial")
summary(logistic)
ll.null <- logistic$null.deviance/-2
ll.proposed <- logistic$deviance/-2
(ll.null - ll.proposed) / ll.null
logistic$R
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
class=class_pc$class)
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
class=class_pc$class)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=class), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
predicted.data
class_pc
class_pc[4:]
class_pc[4:ncol(classpc)]
class_pc[4:ncol(class_pc)]
condensed_data <- class_pc[4:ncol(class_pc)]
logistic <- glm(data=condensed_data, class ~ ., family = "binomial")
summary(logistic)
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
class=class_pc$class)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=class), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
library(ggplot2)
library(GGally)
library(dplyr)
data <- read.csv("data/interim/x_num.csv", row.names = 1)
class <- read.csv("data/interim/y_class.csv", row.names = 1)
pca <- prcomp(data, scale=TRUE, center=TRUE)
summary(pca)$importance[,1]
pca$sdev ^ 2 > 1
pca_rotation <- as.data.frame(pca$rotation)
dim(pca_rotation)
screeplot(pca, main="Scree Plot", type="line")
pca_summary <- NULL
pca_summary <- as.data.frame(seq(1, nrow(data), by=1))
names(pca_summary)[1] <- "index"
pca_summary$var <- summary(pca)$importance[2,]
pca_summary$cum_var <- summary(pca)$importance[3,]
ggplot(data=pca_summary, aes(x=index, y=var)) + geom_line() + geom_point()
ggplot(data=pca_summary, aes(x=index, y=cum_var)) + geom_line()+ geom_point()
class$cancer <- as.factor(class$cancer)
str(class)
class_pc <- cbind(class, pca$x)
ggpairs(data=class_pc, columns = 5:10, ggplot2::aes(colour=cancer), progress = F)
condensed_data <- class_pc[4:ncol(class_pc)]
logistic <- glm(data=condensed_data, class ~ ., family = "binomial")
summary(logistic)
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
class=class_pc$class)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=class), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
logistic <- glm(data=condensed_data, class ~ . - class, family = "binomial")
summary(logistic)
View(condensed_data)
condensed_data %>%
group_by(class) %>%
summarise(mean())
condensed_data %>%
group_by(class) %>%
summarise(mean(n))
condensed_data %>%
group_by(class) %>%
summarise(mean = mean())
condensed_data %>%
group_by(class) %>%
summarise_all(mean)
logistic <- glm(data=condensed_data, class ~ ., family = "binomial")
summary(logistic)
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
class=class_pc$class)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=class), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
logistic$fitted.values
logistic <- glm(data=condensed_data, class ~ PC1, family = "binomial")
summary(logistic)
```{r}
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
class=class_pc$class)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=class), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
cancer=class_pc$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2, family = "binomial")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2, family = "binomial")
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
cancer=class_pc$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2 + PC3, family = "binomial")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2 + PC3, family = "binomial")
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
cancer=class_pc$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2 + PC3 + PC4, family = "binomial")
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
cancer=class_pc$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2 + PC3 + PC4, PC5, family = "binomial")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2 + PC3 + PC4 + PC5, family = "binomial")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2 + PC3 + PC4 + PC5, family = "binomial")
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
cancer=class_pc$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, family = "binomial")
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
cancer=class_pc$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
logistic <- glm(data=condensed_data, class ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7, family = "binomial")
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
cancer=class_pc$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
summary(logistic)
class_pc
train <- class_pc[class$test_train == 0]
test <- class_pc[class$test_train == 1]
View(test)
View(test)
train <- class_pc[class_pc$test_train == 0]
test <- class_pc[class_pc$test_train == 1]
View(test)
View(class_pc)
train <- class_pc$test_train[class_pc$test_train == 0]
test <- class_pc$test_train[class_pc$test_train == 1]
train <- class_pc[which(test_train == 0),]
train <- class_pc[which(class_pc$test_train == 0),]
View(train)
test <- class_pc[which(class_pc$test_train == 1),]
train <- class_pc[which(class_pc$test_train == 0),]
test <- class_pc[which(class_pc$test_train == 1),]
#condensed_data %>%
#	group_by(class) %>%
#	summarise_all(mean)
logistic <- glm(data=train[4:ncol(train)], class ~ PC1, family = "binomial")
summary(logistic)
logistic <- glm(data=train[4:ncol(train)], class ~ ., family = "binomial")
summary(logistic)
logistic <- glm(data=train[4:14], class ~ ., family = "binomial")
summary(logistic)
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
cancer=class_pc$cancer)
## now we can plot the data
predicted.data <- data.frame(
probability = logistic$fitted.values,
cancer=train$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
logistic$fitted.values
predict(logistic, newdata = test)
predict(logistic, newdata = test[5:14])
predict(logistic, newdata = test[])
predict(logistic, newdata = test[], type="response")
predict(logistic, newdata = test[5:14], type="response")
predicted.data <- data.frame(
probability = predict(logistic, newdata = test[5:14], type="response"),
cancer=test$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
install.packages("caret")
model <- train(class~.,
data=class_pc[4:14],
method = "glm",
trControl = trainControl(
method = "cv",
number = 8,
verboseIter = TRUE
)
)
library(caret)
model <- train(class~.,
data=class_pc[4:14],
method = "glm",
trControl = trainControl(
method = "cv",
number = 8,
verboseIter = TRUE
)
)
set.seed(1)
cv_folds <- createMultiFolds(class_pc$cancer, k=3, times=3)
ctrl <- trainControl(method="repeatedcv",
number = 3,
repeats = 3)
train(x = class_pc[5:14],
y = class_pc$cancer,
method = "glm",
trControl = ctrl)
model <- train(class~.,
data=class_pc[4:14],
method = "glm",
trControl = trainControl(
method = "cv",
number = 8,
verboseIter = TRUE
)
)
library(caret)
set.seed(1)
cv_folds <- createMultiFolds(class_pc$cancer, k=3, times=3)
ctrl <- trainControl(method="repeatedcv",
number = 3,
repeats = 3)
train(x = class_pc[5:14],
y = class_pc$cancer,
method = "glm",
trControl = ctrl)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages('e1071', dependencies=TRUE)
train(x = class_pc[5:14],
y = class_pc$cancer,
method = "glm",
trControl = ctrl)
library(caret)
set.seed(1)
cv_folds <- createMultiFolds(class_pc$cancer, k=3, times=3)
ctrl <- trainControl(method="repeatedcv",
number = 3,
repeats = 3)
train(x = class_pc[5:14],
y = class_pc$cancer,
method = "glm",
trControl = ctrl)
set.seed(1)
cv_folds <- createMultiFolds(class_pc$cancer, k=3, times=5)
ctrl <- trainControl(method="repeatedcv",
number = 3,
repeats = 5)
train(x = class_pc[5:14],
y = class_pc$cancer,
method = "glm",
trControl = ctrl)
library(caret)
set.seed(1)
cv_folds <- createMultiFolds(class_pc$cancer, k=3, times=5)
ctrl <- trainControl(method="repeatedcv",
number = 3,
repeats = 5)
train(x = class_pc[5:14],
y = class_pc$cancer,
method = "rf",
trControl = ctrl)
train(x = class_pc[5:14],
y = class_pc$cancer,
method = "glm",
trControl = ctrl)
train(x = class_pc[5:14],
y = class_pc$cancer,
method = "glm",
trControl = ctrl,
control = glm.control(maxit=50))
predicted.data <- data.frame(
probability = predict(cv_model, newdata = test[5:14], type="response"),
cancer=test$cancer)
library(caret)
set.seed(1)
cv_folds <- createMultiFolds(class_pc$cancer, k=3, times=5)
ctrl <- trainControl(method="repeatedcv",
number = 3,
repeats = 5)
cv_model <- train(x = class_pc[5:14],
y = class_pc$cancer,
method = "glm",
trControl = ctrl,
control = glm.control(maxit=50))
cv_model
predicted.data <- data.frame(
probability = predict(cv_model, newdata = test[5:14], type="response"),
cancer=test$cancer)
predicted.data <- data.frame(
probability = predict(cv_model, newdata = test[5:14]),
cancer=test$cancer)
predicted.data <- data.frame(
probability = predict(cv_model, newdata = test[5:14]),
cancer=test$cancer)
predicted.data <- predicted.data[
order(predicted.data$probability, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
predicted.data
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability)) +
geom_point(aes(color=cancer), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
dim(pca$rotation)
dim(data.frame(pca$rotation))
